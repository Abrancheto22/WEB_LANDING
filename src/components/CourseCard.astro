---
interface Props {
  title: string;
  description: string;
  price: string;
  rating: number;
  icon: string;
  badge?: string;
  color?: string;
  delay?: number;
  children?: React.ReactNode;
}

const { title, description, price, rating, icon, badge, color = "indigo", delay = 0, children } = Astro.props as Props;

const getBgColor = () => {
  switch (color) {
    case "indigo":
      return "bg-gradient-to-r from-indigo-600 to-indigo-700";
    case "blue":
      return "bg-gradient-to-r from-blue-600 to-blue-700";
    case "purple":
      return "bg-gradient-to-r from-purple-600 to-purple-700";
    case "yellow":
      return "bg-gradient-to-r from-yellow-600 to-yellow-700";
    default:
      return "bg-gradient-to-r from-indigo-600 to-indigo-700";
  }
};

const getBadgeColor = () => {
  switch (color) {
    case "indigo":
      return "text-indigo-600 bg-indigo-100";
    case "blue":
      return "text-blue-600 bg-blue-100";
    case "purple":
      return "text-purple-600 bg-purple-100";
    default:
      return "text-indigo-600 bg-indigo-100";
  }
};

const getIcon = () => {
  switch (icon) {
    case "laptop":
      return "fas fa-laptop";
    case "brain":
      return "fas fa-brain";
    case "rocket":
      return "fas fa-rocket";
    default:
      return "fas fa-laptop";
  }
};

const getRatingStars = () => {
  const stars = [];
  for (let i = 0; i < 5; i++) {
    stars.push(i < rating ? "fas fa-star text-yellow-400" : "far fa-star text-gray-300");
  }
  return stars;
};

const delayClass = delay ? `delay-${delay * 100}` : '';

---

<div class="course-card animate-slide-in ${delayClass} p-6 rounded-2xl shadow-lg hover:shadow-xl transition-all duration-300 relative overflow-hidden">
  <div class="absolute -top-4 -right-4 w-12 h-12 rounded-full bg-white flex items-center justify-center">
    <i class="${getIcon()} text-2xl ${color === 'yellow' ? 'text-yellow-600' : 'text-white'}"></i>
  </div>

  {badge && (
    <div class="absolute top-4 left-4 px-3 py-1 rounded-full text-sm font-semibold ${getBadgeColor()}">
      {badge}
    </div>
  )}

  <div class="mt-8">
    <h3 class="text-xl font-semibold text-gray-900 mb-2">
      {title}
    </h3>
    <p class="text-gray-600 mb-4 leading-relaxed">
      {description}
    </p>
    <div class="flex items-center space-x-2 mb-4">
      {getRatingStars().map((star) => (
        <i class={star}></i>
      ))}
    </div>
    <div class="flex items-center justify-between">
      <span class="text-xl font-bold text-gray-900">
        ${price}
      </span>
      <a 
        href={`/comprar-curso?title=${encodeURIComponent(title)}&description=${encodeURIComponent(description)}&price=${encodeURIComponent(price)}&color=${encodeURIComponent(color)}`}
        class="px-6 py-2 rounded-full bg-white text-gray-800 font-semibold hover:bg-gray-100 transition-colors block"
        onclick="event.preventDefault(); window.location.href = this.href"
      >
        Ver m√°s
      </a>
    </div>
  </div>
</div>
